

# ===== Archivo: C:\Users\peric\Documents\portfolio\spring-workspace\redsocial2026\pom.xml =====

<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" 
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                             http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.5.6</version>
        <relativePath/>
    </parent>

    <groupId>com.example</groupId>
    <artifactId>redsocial2026</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>redsocial2026</name>
    <description>API REST con Spring Boot, JWT y MySQL</description>

    <properties>
        <java.version>17</java.version>
        <jjwt.version>0.11.5</jjwt.version>
    </properties>

    <dependencies>
        <!-- Spring Boot Web -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <!-- Spring Data JPA -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>

        <!-- Spring Security -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-security</artifactId>
        </dependency>

        <!-- MySQL Connector -->
        <dependency>
            <groupId>com.mysql</groupId>
            <artifactId>mysql-connector-j</artifactId>
            <scope>runtime</scope>
        </dependency>

        <!-- JWT -->
        <dependency>
            <groupId>io.jsonwebtoken</groupId>
            <artifactId>jjwt-api</artifactId>
            <version>${jjwt.version}</version>
        </dependency>
        <dependency>
            <groupId>io.jsonwebtoken</groupId>
            <artifactId>jjwt-impl</artifactId>
            <version>${jjwt.version}</version>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>io.jsonwebtoken</groupId>
            <artifactId>jjwt-jackson</artifactId>
            <version>${jjwt.version}</version>
            <scope>runtime</scope>
        </dependency>

        <!-- Lombok -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>

        <!-- Testing -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-test</artifactId>
            <scope>test</scope>
        </dependency>
        
        <!-- Validación de campos (JSR 380 / Jakarta Validation) -->
		<dependency>
    		<groupId>org.springframework.boot</groupId>
    		<artifactId>spring-boot-starter-validation</artifactId>
		</dependency>
    </dependencies>

    <build>
        <plugins>
            <!-- Compilador con Lombok -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.11.0</version>
                <configuration>
                    <source>${java.version}</source>
                    <target>${java.version}</target>
                    <annotationProcessorPaths>
                        <path>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                            <version>1.18.30</version>
                        </path>
                    </annotationProcessorPaths>
                </configuration>
            </plugin>

            <!-- Spring Boot Maven Plugin -->
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>

            <!-- Recursos UTF-8 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <version>3.3.1</version>
                <configuration>
                    <encoding>UTF-8</encoding>
                </configuration>
            </plugin>
        </plugins>
    </build>

</project>



# ===== Archivo: C:\Users\peric\Documents\portfolio\spring-workspace\redsocial2026\.mvn\wrapper\maven-wrapper.properties =====

wrapperVersion=3.3.4
distributionType=only-script
distributionUrl=https://repo.maven.apache.org/maven2/org/apache/maven/apache-maven/3.9.11/apache-maven-3.9.11-bin.zip


# ===== Archivo: C:\Users\peric\Documents\portfolio\spring-workspace\redsocial2026\src\main\java\com\example\redsocial2026\Redsocial2026Application.java =====

package com.example.redsocial2026;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

/**
 * Clase principal de la aplicación Spring Boot.
 * La anotación @SpringBootApplication habilita:
 *  - Configuración automática de Spring Boot
 *  - Escaneo de componentes (@ComponentScan)
 *  - Configuración de beans y dependencias
 */
// Esta clase levanta tu aplicación Spring Boot
@SpringBootApplication
public class Redsocial2026Application {

	public static void main(String[] args) {
		SpringApplication.run(Redsocial2026Application.class, args);
	}

}


# ===== Archivo: C:\Users\peric\Documents\portfolio\spring-workspace\redsocial2026\src\main\java\com\example\redsocial2026\config\SecurityConfig.java =====

package com.example.redsocial2026.config;

import com.example.redsocial2026.security.JwtAuthenticationEntryPoint;
import com.example.redsocial2026.security.JwtAuthenticationFilter;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.Customizer;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
import org.springframework.web.servlet.config.annotation.CorsRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

@Configuration
public class SecurityConfig {

    @Autowired
    private JwtAuthenticationFilter jwtAuthenticationFilter;

    @Autowired
    private JwtAuthenticationEntryPoint jwtAuthenticationEntryPoint;

    @Bean
    PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }

    @Bean
    AuthenticationManager authenticationManager(AuthenticationConfiguration authConfig) throws Exception {
        return authConfig.getAuthenticationManager();
    }

    @Bean
    SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http
            .csrf(csrf -> csrf.disable())
            .cors(Customizer.withDefaults())
            .exceptionHandling(ex -> ex
                .authenticationEntryPoint(jwtAuthenticationEntryPoint)
            )
            .authorizeHttpRequests(auth -> auth
                .requestMatchers("/api/auth/**").permitAll()
                .anyRequest().authenticated()
            )
            .sessionManagement(sess -> sess.sessionCreationPolicy(SessionCreationPolicy.STATELESS))
            .addFilterBefore(jwtAuthenticationFilter, UsernamePasswordAuthenticationFilter.class);

        return http.build();
    }

    // Configuración global CORS
    @Bean
    WebMvcConfigurer corsConfigurer() {
        return new WebMvcConfigurer() {
            @Override
            public void addCorsMappings(CorsRegistry registry) {
                registry.addMapping("/api/**")
                        .allowedOrigins("http://localhost:4200")
                        .allowedMethods("GET", "POST", "PUT", "DELETE", "OPTIONS")
                        .allowedHeaders("*")
                        .allowCredentials(true);
            }
        };
    }
}


# ===== Archivo: C:\Users\peric\Documents\portfolio\spring-workspace\redsocial2026\src\main\java\com\example\redsocial2026\controller\AuthController.java =====

package com.example.redsocial2026.controller;

import com.example.redsocial2026.dto.UsuarioDTO;
import com.example.redsocial2026.model.Usuario;
import com.example.redsocial2026.security.JwtTokenUtil;
import com.example.redsocial2026.service.UsuarioService;

import jakarta.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.*;
import org.springframework.web.bind.annotation.*;

import java.util.HashMap;
import java.util.Map;
import java.util.stream.Collectors;

@RestController
@RequestMapping("/api/auth")
public class AuthController {

    @Autowired
    private UsuarioService usuarioService;

    @Autowired
    private AuthenticationManager authenticationManager;

    @Autowired
    private JwtTokenUtil jwtTokenUtil;

    @PostMapping("/register")
    public ResponseEntity<?> registrar(@Valid @RequestBody UsuarioDTO usuarioDTO) {
        try {
            Usuario usuario = convertToEntity(usuarioDTO);
            Usuario saved = usuarioService.guardarUsuario(usuario);
            return ResponseEntity.ok(convertToDTO(saved));
        } catch (DataIntegrityViolationException e) {
            return ResponseEntity
                    .badRequest()
                    .body(Map.of("message", "Usuario ya existe"));
        }
    }

    @PostMapping("/login")
    public ResponseEntity<?> login(@RequestBody UsuarioDTO usuarioDTO) {
        try {
            authenticationManager.authenticate(
                    new UsernamePasswordAuthenticationToken(
                            usuarioDTO.getUsername(),
                            usuarioDTO.getPassword()
                    )
            );

            Usuario u = usuarioService.buscarPorUsername(usuarioDTO.getUsername());
            String token = jwtTokenUtil.generateToken(u.getId(), u.getUsername(), u.getEmail());

            Map<String, Object> response = new HashMap<>();
            response.put("token", token);
            response.put("usuario", u.getUsername());
            response.put("id", u.getId());
            response.put("email", u.getEmail());

            return ResponseEntity.ok(response);

        } catch (BadCredentialsException e) {
            return ResponseEntity.status(401).body(Map.of("message", "Usuario o contraseña incorrectos"));
        } catch (DisabledException e) {
            return ResponseEntity.status(403).body(Map.of("message", "Usuario deshabilitado"));
        }
    }

    @GetMapping("/test")
    public String test() {
        return "API segura funcionando con JWT!";
    }

    // -------------------------------
    // Métodos de conversión
    // -------------------------------

    private Usuario convertToEntity(UsuarioDTO dto) {
        Usuario u = new Usuario();
        u.setUsername(dto.getUsername());
        u.setPassword(dto.getPassword());
        u.setEmail(dto.getEmail());
        return u;
    }

    private UsuarioDTO convertToDTO(Usuario u) {
        UsuarioDTO dto = new UsuarioDTO();
        dto.setId(u.getId());
        dto.setUsername(u.getUsername());
        dto.setEmail(u.getEmail());
        dto.setRoles(u.getRoles().stream()
                .map(r -> r.getNombre())
                .collect(Collectors.toSet()));
        return dto;
    }
}


# ===== Archivo: C:\Users\peric\Documents\portfolio\spring-workspace\redsocial2026\src\main\java\com\example\redsocial2026\controller\ForoController.java =====

package com.example.redsocial2026.controller;

import com.example.redsocial2026.dto.MensajeDTO;
import com.example.redsocial2026.model.Mensaje;
import com.example.redsocial2026.model.Topic;
import com.example.redsocial2026.model.Usuario;
import com.example.redsocial2026.service.MensajeService;
import com.example.redsocial2026.service.TopicService;
import com.example.redsocial2026.service.UsuarioService;

import jakarta.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.time.LocalDateTime;
import java.util.Map;

@RestController
@RequestMapping("/api/foro")
public class ForoController {

    @Autowired
    private MensajeService mensajeService;

    @Autowired
    private UsuarioService usuarioService;

    @Autowired
    private TopicService topicService;

    @PostMapping("/mensaje")
    public ResponseEntity<?> crearMensaje(@Valid @RequestBody MensajeDTO mensajeDTO) {
        try {
            // Validar usuario y topic
            Usuario usuario = usuarioService.buscarPorId(mensajeDTO.getUsuarioId());
            Topic topic = topicService.buscarPorId(mensajeDTO.getTopicId());

            // Convertir DTO → entidad
            Mensaje mensaje = new Mensaje();
            mensaje.setUsuario(usuario);
            mensaje.setTopic(topic);
            mensaje.setMensaje(mensajeDTO.getMensaje());
            mensaje.setDate(LocalDateTime.now());

            // Guardar
            Mensaje saved = mensajeService.guardarMensaje(mensaje);

            // Retornar DTO limpio
            return ResponseEntity.ok(convertToDTO(saved));

        } catch (RuntimeException e) {
            return ResponseEntity
                    .badRequest()
                    .body(Map.of("message", e.getMessage()));
        }
    }

    // -------------------------------
    // Métodos de conversión
    // -------------------------------
    private MensajeDTO convertToDTO(Mensaje mensaje) {
        MensajeDTO dto = new MensajeDTO();
        dto.setId(mensaje.getId());
        dto.setMensaje(mensaje.getMensaje());
        dto.setDate(mensaje.getDate());
        dto.setUsuarioId(mensaje.getUsuario().getId());
        dto.setUsuarioNombre(mensaje.getUsuario().getUsername());
        dto.setTopicId(mensaje.getTopic().getId());
        dto.setTopicNombre(mensaje.getTopic().getNombre());
        return dto;
    }
}


# ===== Archivo: C:\Users\peric\Documents\portfolio\spring-workspace\redsocial2026\src\main\java\com\example\redsocial2026\dto\MensajeDTO.java =====

package com.example.redsocial2026.dto;

import jakarta.validation.constraints.NotBlank;
import lombok.Data;
import java.time.LocalDateTime;

@Data
public class MensajeDTO {
    private Long id;

    @NotBlank(message = "El mensaje no puede estar vacío")
    private String mensaje;

    private Long topicId;
    private String topicNombre;

    private Long usuarioId;
    private String usuarioNombre;

    private LocalDateTime date;
}


# ===== Archivo: C:\Users\peric\Documents\portfolio\spring-workspace\redsocial2026\src\main\java\com\example\redsocial2026\dto\TopicDTO.java =====

package com.example.redsocial2026.dto;

import jakarta.validation.constraints.NotBlank;
import lombok.Data;

@Data
public class TopicDTO {
    private Long id;

    @NotBlank(message = "El nombre del topic no puede estar vacío")
    private String nombre;

    private Long categoriaId;
    private String categoriaNombre; // opcional
}


# ===== Archivo: C:\Users\peric\Documents\portfolio\spring-workspace\redsocial2026\src\main\java\com\example\redsocial2026\dto\UsuarioDTO.java =====

package com.example.redsocial2026.dto;

import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;
import lombok.Data;
import java.util.Set;

@Data
public class UsuarioDTO {
    private Long id;

    @NotBlank(message = "El nombre de usuario no puede estar vacío")
    private String username;

    @NotBlank(message = "La contraseña no puede estar vacía")
    private String password;

    @NotBlank(message = "El correo electrónico no puede estar vacío")
    @Email(message = "El correo electrónico no es válido")
    private String email;

    private Set<String> roles; // Nombres de roles
}


# ===== Archivo: C:\Users\peric\Documents\portfolio\spring-workspace\redsocial2026\src\main\java\com\example\redsocial2026\model\Categoria.java =====

package com.example.redsocial2026.model;

import jakarta.persistence.*;
import jakarta.validation.constraints.NotBlank;
import lombok.Data;

@Entity
@Data
@Table(
    name = "categoria",
    uniqueConstraints = {
        @UniqueConstraint(columnNames = "nombre")
    }
)
public class Categoria {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(nullable = false, unique = true)
    @NotBlank(message = "El nombre de la categoría no puede estar vacío")
    private String nombre;
}


# ===== Archivo: C:\Users\peric\Documents\portfolio\spring-workspace\redsocial2026\src\main\java\com\example\redsocial2026\model\Mensaje.java =====

package com.example.redsocial2026.model;

import jakarta.persistence.*;
import jakarta.validation.constraints.NotBlank;
import lombok.Data;
import java.time.LocalDateTime;

@Entity
@Data
@Table(name = "mensaje")
public class Mensaje {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    // Relación con topic
    @ManyToOne
    @JoinColumn(name = "topic_id", nullable = false)
    private Topic topic;

    // Usuario que publica el mensaje
    @ManyToOne
    @JoinColumn(name = "usuario_id", nullable = false)
    private Usuario usuario;

    // Fecha y hora de publicación
    @Column(nullable = false, updatable = false)
    private LocalDateTime date;

    // Mensaje del post
    @Column(nullable = false, columnDefinition = "TEXT")
    @NotBlank(message = "El mensaje no puede estar vacío")
    private String mensaje;

    // Se ejecuta automáticamente antes de insertar por primera vez
    @PrePersist
    protected void onCreate() {
        this.date = LocalDateTime.now();
    }
}


# ===== Archivo: C:\Users\peric\Documents\portfolio\spring-workspace\redsocial2026\src\main\java\com\example\redsocial2026\model\Rol.java =====

package com.example.redsocial2026.model;

import jakarta.persistence.*;
import lombok.Data;

@Entity
@Data
@Table(
    name = "rol",
    uniqueConstraints = {
        @UniqueConstraint(columnNames = "nombre")
    }
)
public class Rol {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(nullable = false, unique = true)
    private String nombre; // Ej: ROLE_USER, ROLE_ADMIN
}


# ===== Archivo: C:\Users\peric\Documents\portfolio\spring-workspace\redsocial2026\src\main\java\com\example\redsocial2026\model\Topic.java =====

package com.example.redsocial2026.model;

import jakarta.persistence.*;
import jakarta.validation.constraints.NotBlank;
import lombok.Data;

@Entity
@Data
@Table(
    name = "topic",
    uniqueConstraints = {
        @UniqueConstraint(columnNames = "nombre")
    }
)
public class Topic {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    
    // Relación con categoría
    @ManyToOne
    @JoinColumn(name = "categoria_id", nullable = false)
    private Categoria categoria;

    @Column(nullable = false, unique = true)
    @NotBlank(message = "El nombre del topic no puede estar vacío")
    private String nombre;
}


# ===== Archivo: C:\Users\peric\Documents\portfolio\spring-workspace\redsocial2026\src\main\java\com\example\redsocial2026\model\Usuario.java =====

package com.example.redsocial2026.model;

import jakarta.persistence.*;
import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;
import lombok.Data;
import java.util.Set;

@Entity
@Data
@Table(
    name = "usuario",
    uniqueConstraints = {
        @UniqueConstraint(columnNames = {"username"}),
        @UniqueConstraint(columnNames = {"email"})
    }
)
public class Usuario {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(nullable = false, unique = true)
    @NotBlank(message = "El nombre de usuario no puede estar vacío")
    private String username; // Nombre de usuario (único)

    @Column(nullable = false)
    @NotBlank(message = "La contraseña no puede estar vacía")
    private String password; // Contraseña encriptada

    @Column(nullable = false, unique = true)
    @NotBlank(message = "El correo electrónico no puede estar vacío")
    @Email(message = "El correo electrónico no es válido")
    private String email; // Nuevo campo email (único y obligatorio)

    @ManyToMany(fetch = FetchType.EAGER)
    @JoinTable(
        name = "usuario_roles",
        joinColumns = @JoinColumn(name = "usuario_id"),
        inverseJoinColumns = @JoinColumn(name = "rol_id")
    )
    private Set<Rol> roles;
}


# ===== Archivo: C:\Users\peric\Documents\portfolio\spring-workspace\redsocial2026\src\main\java\com\example\redsocial2026\repository\CategoriaRepository.java =====

package com.example.redsocial2026.repository;

import com.example.redsocial2026.model.Categoria;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface CategoriaRepository extends JpaRepository<Categoria, Long> {
}


# ===== Archivo: C:\Users\peric\Documents\portfolio\spring-workspace\redsocial2026\src\main\java\com\example\redsocial2026\repository\MensajeRepository.java =====

package com.example.redsocial2026.repository;

import com.example.redsocial2026.model.Mensaje;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface MensajeRepository extends JpaRepository<Mensaje, Long> {
    // Podemos agregar métodos personalizados más adelante si es necesario
}


# ===== Archivo: C:\Users\peric\Documents\portfolio\spring-workspace\redsocial2026\src\main\java\com\example\redsocial2026\repository\RolRepository.java =====

package com.example.redsocial2026.repository;

import com.example.redsocial2026.model.Rol;
import org.springframework.data.jpa.repository.JpaRepository;

/**
 * Repositorio para la entidad Rol.
 * JpaRepository proporciona métodos CRUD automáticamente.
 */
public interface RolRepository extends JpaRepository<Rol, Long> {

    /**
     * Buscar un rol por su nombre
     * @param nombre Nombre del rol
     * @return Rol encontrado
     */
    Rol findByNombre(String nombre);
}


# ===== Archivo: C:\Users\peric\Documents\portfolio\spring-workspace\redsocial2026\src\main\java\com\example\redsocial2026\repository\TopicRepository.java =====

package com.example.redsocial2026.repository;

import com.example.redsocial2026.model.Topic;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface TopicRepository extends JpaRepository<Topic, Long> {
}


# ===== Archivo: C:\Users\peric\Documents\portfolio\spring-workspace\redsocial2026\src\main\java\com\example\redsocial2026\repository\UsuarioRepository.java =====

package com.example.redsocial2026.repository;

import com.example.redsocial2026.model.Usuario;
import org.springframework.data.jpa.repository.JpaRepository;
import java.util.Optional;

/**
 * Repositorio para la entidad Usuario.
 * 
 * Al extender JpaRepository<Usuario, Long>, este repositorio hereda automáticamente
 * una gran cantidad de métodos CRUD y de paginación/ordenamiento que ya están implementados
 * por Spring Data JPA. Algunos de ellos son:
 * 
 * Métodos CRUD básicos (de CrudRepository):
 *   - S save(S entity)                 : Inserta o actualiza una entidad.
 *   - Optional<T> findById(ID id)     : Busca una entidad por su ID.
 *   - boolean existsById(ID id)        : Comprueba si existe una entidad con ese ID.
 *   - Iterable<T> findAll()            : Devuelve todas las entidades.
 *   - Iterable<T> findAllById(Iterable<ID> ids) : Devuelve las entidades con los IDs indicados.
 *   - long count()                      : Cuenta cuántas entidades hay.
 *   - void deleteById(ID id)            : Borra una entidad por su ID.
 *   - void delete(T entity)             : Borra una entidad.
 *   - void deleteAll()                  : Borra todas las entidades.
 * 
 * Métodos de paginación y ordenamiento (de PagingAndSortingRepository):
 *   - Iterable<T> findAll(Sort sort)   : Devuelve todas las entidades ordenadas.
 *   - Page<T> findAll(Pageable pageable): Devuelve entidades paginadas.
 * 
 * Métodos adicionales de JpaRepository:
 *   - List<T> findAll()                 : Devuelve todas las entidades como lista.
 *   - List<T> findAll(Sort sort)        : Devuelve todas las entidades ordenadas como lista.
 *   - List<T> findAllById(Iterable<ID> ids) : Devuelve todas las entidades por IDs como lista.
 *   - void flush()                       : Fuerza a la base de datos a ejecutar los cambios pendientes.
 *   - S saveAndFlush(S entity)           : Guarda y hace flush inmediatamente.
 *   - void deleteInBatch(Iterable<T> entities) : Borra varias entidades en batch.
 *   - void deleteAllInBatch()            : Borra todas las entidades en batch.
 *   - T getById(ID id)                   : Devuelve una referencia a la entidad (lazy load).
 * 
 * Además, podemos definir métodos personalizados por convención de nombres,
 * como findByUsername, findByEmail, existsByEmail, etc., que Spring implementa automáticamente.
 */
public interface UsuarioRepository extends JpaRepository<Usuario, Long> {

    /**
     * Buscar un usuario por su username
     * @param username Nombre de usuario
     * @return Optional con el usuario si existe
     */
    Optional<Usuario> findByUsername(String username);
}


# ===== Archivo: C:\Users\peric\Documents\portfolio\spring-workspace\redsocial2026\src\main\java\com\example\redsocial2026\security\CustomUserDetailsService.java =====

package com.example.redsocial2026.security;

import com.example.redsocial2026.model.Usuario;
import com.example.redsocial2026.repository.UsuarioRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.userdetails.*;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.stereotype.Service;

import java.util.stream.Collectors;

/**
 * Implementa UserDetailsService para cargar usuarios desde la base de datos.
 * Spring Security lo utiliza para autenticar usuarios.
 */
@Service
public class CustomUserDetailsService implements UserDetailsService {

    @Autowired
    private UsuarioRepository usuarioRepository;

    @Override
    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
        Usuario usuario = usuarioRepository.findByUsername(username)
                .orElseThrow(() -> new UsernameNotFoundException("Usuario no encontrado: " + username));

        // Convierte los roles de Usuario a authorities de Spring Security
        return new org.springframework.security.core.userdetails.User(
                usuario.getUsername(),
                usuario.getPassword(),
                usuario.getRoles().stream()
                        .map(rol -> new SimpleGrantedAuthority(rol.getNombre()))
                        .collect(Collectors.toList())
        );
    }
}


# ===== Archivo: C:\Users\peric\Documents\portfolio\spring-workspace\redsocial2026\src\main\java\com\example\redsocial2026\security\JwtAuthenticationEntryPoint.java =====

package com.example.redsocial2026.security;

import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.web.AuthenticationEntryPoint;
import org.springframework.stereotype.Component;

import java.io.IOException;

@Component
public class JwtAuthenticationEntryPoint implements AuthenticationEntryPoint {

    @Override
    public void commence(
            HttpServletRequest request,
            HttpServletResponse response,
            AuthenticationException authException) throws IOException {

        // Devuelve 401 cuando no hay token o credenciales incorrectas
        response.sendError(HttpServletResponse.SC_UNAUTHORIZED, "⚠️ Credenciales inválidas o token no válido");
    }
}


# ===== Archivo: C:\Users\peric\Documents\portfolio\spring-workspace\redsocial2026\src\main\java\com\example\redsocial2026\security\JwtAuthenticationFilter.java =====

package com.example.redsocial2026.security;

import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;

import java.io.IOException;

/**
 * Filtro que intercepta todas las peticiones HTTP,
 * extrae el token JWT del encabezado Authorization,
 * y si es válido, autentica al usuario en el contexto de Spring Security.
 */
@Component
public class JwtAuthenticationFilter extends OncePerRequestFilter {

    @Autowired
    private JwtTokenUtil jwtTokenUtil;

    @Autowired
    private UserDetailsService userDetailsService;

    @Override
    protected void doFilterInternal(HttpServletRequest request,
                                    HttpServletResponse response,
                                    FilterChain filterChain)
            throws ServletException, IOException {

        // Extrae el encabezado Authorization
        String authHeader = request.getHeader("Authorization");

        String username = null;
        String token = null;

        // El token debe tener el formato "Bearer <token>"
        if (authHeader != null && authHeader.startsWith("Bearer ")) {
            token = authHeader.substring(7);
            username = jwtTokenUtil.getUsernameFromToken(token);
        }

        // Si el token es válido y no hay autenticación actual
        if (username != null && SecurityContextHolder.getContext().getAuthentication() == null) {
            UserDetails userDetails = userDetailsService.loadUserByUsername(username);

            if (jwtTokenUtil.validateToken(token)) {
                // Crea la autenticación manualmente
                UsernamePasswordAuthenticationToken authentication =
                        new UsernamePasswordAuthenticationToken(userDetails, null, userDetails.getAuthorities());

                SecurityContextHolder.getContext().setAuthentication(authentication);
            }
        }

        // Continúa con el siguiente filtro
        filterChain.doFilter(request, response);
    }
}


# ===== Archivo: C:\Users\peric\Documents\portfolio\spring-workspace\redsocial2026\src\main\java\com\example\redsocial2026\security\JwtTokenUtil.java =====

package com.example.redsocial2026.security;

import io.jsonwebtoken.*;
import io.jsonwebtoken.security.Keys;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

import java.security.Key;
import java.util.Date;

/**
 * Clase utilitaria para generar y validar JWT usando la API moderna de JJWT.
 */
@Component
public class JwtTokenUtil {

    @Value("${jwt.secret}")
    private String secret; // Clave secreta (debe ser larga para HS512)

    @Value("${jwt.expiration}")
    private Long expiration; // Expiración en milisegundos

    // Crea un objeto Key a partir del secret
    private Key getSigningKey() {
        return Keys.hmacShaKeyFor(secret.getBytes());
    }

    /**
     * Genera un token JWT con el username como sujeto.
     */
    public String generateToken(Long id, String username, String email) {
        return Jwts.builder()
                .setSubject(username)                 // sigue siendo el username
                .claim("id", id)                      // añadimos el id
                .claim("email", email)                // añadimos el email
                .setIssuedAt(new Date())
                .setExpiration(new Date(System.currentTimeMillis() + expiration))
                .signWith(getSigningKey(), SignatureAlgorithm.HS512)
                .compact();
    }


    /**
     * Extrae el username del token JWT.
     */
    public String getUsernameFromToken(String token) {
        return Jwts.parserBuilder()
                .setSigningKey(getSigningKey()) // API moderna
                .build()
                .parseClaimsJws(token)
                .getBody()
                .getSubject();
    }

    /**
     * Valida el token JWT (firma correcta y no expirado).
     */
    public boolean validateToken(String token) {
        try {
            Jwts.parserBuilder()
                .setSigningKey(getSigningKey())
                .build()
                .parseClaimsJws(token);
            return true;
        } catch (JwtException | IllegalArgumentException e) {
            System.out.println("Token JWT inválido: " + e.getMessage());
            return false;
        }
    }
}


# ===== Archivo: C:\Users\peric\Documents\portfolio\spring-workspace\redsocial2026\src\main\java\com\example\redsocial2026\service\CategoriaService.java =====

package com.example.redsocial2026.service;

import com.example.redsocial2026.model.Categoria;
import com.example.redsocial2026.repository.CategoriaRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class CategoriaService {

    @Autowired
    private CategoriaRepository categoriaRepository;

    public Categoria buscarPorId(Long id) {
        return categoriaRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Categoría no encontrada con id: " + id));
    }
}


# ===== Archivo: C:\Users\peric\Documents\portfolio\spring-workspace\redsocial2026\src\main\java\com\example\redsocial2026\service\MensajeService.java =====

package com.example.redsocial2026.service;

import com.example.redsocial2026.model.Mensaje;
import com.example.redsocial2026.repository.MensajeRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class MensajeService {

    @Autowired
    private MensajeRepository mensajeRepository;

    /**
     * Guarda un mensaje en la base de datos.
     * @param mensaje Mensaje a guardar
     * @return Mensaje guardado con ID generado
     */
    public Mensaje guardarMensaje(Mensaje mensaje) {
        return mensajeRepository.save(mensaje);
    }

    /**
     * Obtiene todos los mensajes (opcional)
     */
    public List<Mensaje> obtenerTodosMensajes() {
        return mensajeRepository.findAll();
    }
}


# ===== Archivo: C:\Users\peric\Documents\portfolio\spring-workspace\redsocial2026\src\main\java\com\example\redsocial2026\service\TopicService.java =====

package com.example.redsocial2026.service;

import com.example.redsocial2026.model.Topic;
import com.example.redsocial2026.repository.TopicRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class TopicService {

    @Autowired
    private TopicRepository topicRepository;

    public Topic buscarPorId(Long id) {
        return topicRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Topic no encontrado con id: " + id));
    }
}


# ===== Archivo: C:\Users\peric\Documents\portfolio\spring-workspace\redsocial2026\src\main\java\com\example\redsocial2026\service\UsuarioService.java =====

package com.example.redsocial2026.service;

import com.example.redsocial2026.model.Usuario;
import com.example.redsocial2026.repository.UsuarioRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

/**
 * Servicio para manejar la lógica de negocio de usuarios.
 * Se encarga de crear usuarios y encriptar sus contraseñas.
 */
@Service
public class UsuarioService {

    @Autowired
    private UsuarioRepository usuarioRepository;

    @Autowired
    private PasswordEncoder passwordEncoder;

    /**
     * Guarda un usuario en la base de datos.
     * La contraseña se encripta antes de guardar.
     * @param usuario Usuario a guardar
     * @return Usuario guardado
     */
    public Usuario guardarUsuario(Usuario usuario) {
        usuario.setPassword(passwordEncoder.encode(usuario.getPassword()));
        return usuarioRepository.save(usuario);
    }
    
    /**
     * Método para buscar un usuario por username
     * @param username Nombre de usuario
     * @return Usuario encontrado
     */
    public Usuario buscarPorUsername(String username) {
        return usuarioRepository.findByUsername(username)
                .orElseThrow(() -> new RuntimeException("Usuario no encontrado"));
    }

    /**
     * Método para buscar un usuario por ID
     * @param id ID del usuario
     * @return Usuario encontrado
     */
    public Usuario buscarPorId(Long id) {
        return usuarioRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Usuario no encontrado con id: " + id));
    }
}


# ===== Archivo: C:\Users\peric\Documents\portfolio\spring-workspace\redsocial2026\src\main\resources\application.properties =====

# Nombre de la aplicación
spring.application.name=redsocial2026

# Configuración de la base de datos MySQL
spring.datasource.url=jdbc:mysql://localhost:3306/redsocial2026?useSSL=false&serverTimezone=UTC
spring.datasource.username=root
spring.datasource.password=1234
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# Configuración de JPA / Hibernate
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect

# Configuración de JWT
# NOTA: Para HS512 se recomienda una clave secreta de al menos 64 caracteres
jwt.secret=MiSecretoSuperSecretoMuyLargoParaJWT123456789012345678901234567890
jwt.expiration=3600000
# 1h en milisegundos

# Configuración de logging (opcional, útil para desarrollo)
logging.level.org.springframework.security=INFO
logging.level.com.example.redsocial2026=DEBUG

# ===== Archivo: C:\Users\peric\Documents\portfolio\spring-workspace\redsocial2026\src\test\java\com\example\redsocial2026\Redsocial2026ApplicationTests.java =====

package com.example.redsocial2026;

import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
class Redsocial2026ApplicationTests {

	@Test
	void contextLoads() {
	}

}
